// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: integration.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_integration_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_integration_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_integration_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_integration_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_integration_2eproto;
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace integration {
class PolicyAddIntegration_Request;
struct PolicyAddIntegration_RequestDefaultTypeInternal;
extern PolicyAddIntegration_RequestDefaultTypeInternal _PolicyAddIntegration_Request_default_instance_;
class PolicyDelIntegration_Request;
struct PolicyDelIntegration_RequestDefaultTypeInternal;
extern PolicyDelIntegration_RequestDefaultTypeInternal _PolicyDelIntegration_Request_default_instance_;
}  // namespace integration
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::wazuh::api::engine::integration::PolicyAddIntegration_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::integration::PolicyAddIntegration_Request>(Arena*);
template<> ::com::wazuh::api::engine::integration::PolicyDelIntegration_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::integration::PolicyDelIntegration_Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace integration {

// ===================================================================

class PolicyAddIntegration_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.integration.PolicyAddIntegration_Request) */ {
 public:
  inline PolicyAddIntegration_Request() : PolicyAddIntegration_Request(nullptr) {}
  ~PolicyAddIntegration_Request() override;
  explicit PROTOBUF_CONSTEXPR PolicyAddIntegration_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PolicyAddIntegration_Request(const PolicyAddIntegration_Request& from);
  PolicyAddIntegration_Request(PolicyAddIntegration_Request&& from) noexcept
    : PolicyAddIntegration_Request() {
    *this = ::std::move(from);
  }

  inline PolicyAddIntegration_Request& operator=(const PolicyAddIntegration_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyAddIntegration_Request& operator=(PolicyAddIntegration_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyAddIntegration_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyAddIntegration_Request* internal_default_instance() {
    return reinterpret_cast<const PolicyAddIntegration_Request*>(
               &_PolicyAddIntegration_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PolicyAddIntegration_Request& a, PolicyAddIntegration_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyAddIntegration_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyAddIntegration_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyAddIntegration_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyAddIntegration_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PolicyAddIntegration_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PolicyAddIntegration_Request& from) {
    PolicyAddIntegration_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyAddIntegration_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.integration.PolicyAddIntegration_Request";
  }
  protected:
  explicit PolicyAddIntegration_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyFieldNumber = 1,
    kIntegrationFieldNumber = 2,
  };
  // optional string policy = 1;
  bool has_policy() const;
  private:
  bool _internal_has_policy() const;
  public:
  void clear_policy();
  const std::string& policy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy();
  PROTOBUF_NODISCARD std::string* release_policy();
  void set_allocated_policy(std::string* policy);
  private:
  const std::string& _internal_policy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy(const std::string& value);
  std::string* _internal_mutable_policy();
  public:

  // optional string integration = 2;
  bool has_integration() const;
  private:
  bool _internal_has_integration() const;
  public:
  void clear_integration();
  const std::string& integration() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_integration(ArgT0&& arg0, ArgT... args);
  std::string* mutable_integration();
  PROTOBUF_NODISCARD std::string* release_integration();
  void set_allocated_integration(std::string* integration);
  private:
  const std::string& _internal_integration() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_integration(const std::string& value);
  std::string* _internal_mutable_integration();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.integration.PolicyAddIntegration_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr integration_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_integration_2eproto;
};
// -------------------------------------------------------------------

class PolicyDelIntegration_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.integration.PolicyDelIntegration_Request) */ {
 public:
  inline PolicyDelIntegration_Request() : PolicyDelIntegration_Request(nullptr) {}
  ~PolicyDelIntegration_Request() override;
  explicit PROTOBUF_CONSTEXPR PolicyDelIntegration_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PolicyDelIntegration_Request(const PolicyDelIntegration_Request& from);
  PolicyDelIntegration_Request(PolicyDelIntegration_Request&& from) noexcept
    : PolicyDelIntegration_Request() {
    *this = ::std::move(from);
  }

  inline PolicyDelIntegration_Request& operator=(const PolicyDelIntegration_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyDelIntegration_Request& operator=(PolicyDelIntegration_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyDelIntegration_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyDelIntegration_Request* internal_default_instance() {
    return reinterpret_cast<const PolicyDelIntegration_Request*>(
               &_PolicyDelIntegration_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PolicyDelIntegration_Request& a, PolicyDelIntegration_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyDelIntegration_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyDelIntegration_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyDelIntegration_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyDelIntegration_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PolicyDelIntegration_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PolicyDelIntegration_Request& from) {
    PolicyDelIntegration_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyDelIntegration_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.integration.PolicyDelIntegration_Request";
  }
  protected:
  explicit PolicyDelIntegration_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyFieldNumber = 1,
    kIntegrationFieldNumber = 2,
  };
  // optional string policy = 1;
  bool has_policy() const;
  private:
  bool _internal_has_policy() const;
  public:
  void clear_policy();
  const std::string& policy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy();
  PROTOBUF_NODISCARD std::string* release_policy();
  void set_allocated_policy(std::string* policy);
  private:
  const std::string& _internal_policy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy(const std::string& value);
  std::string* _internal_mutable_policy();
  public:

  // optional string integration = 2;
  bool has_integration() const;
  private:
  bool _internal_has_integration() const;
  public:
  void clear_integration();
  const std::string& integration() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_integration(ArgT0&& arg0, ArgT... args);
  std::string* mutable_integration();
  PROTOBUF_NODISCARD std::string* release_integration();
  void set_allocated_integration(std::string* integration);
  private:
  const std::string& _internal_integration() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_integration(const std::string& value);
  std::string* _internal_mutable_integration();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.integration.PolicyDelIntegration_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr integration_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_integration_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PolicyAddIntegration_Request

// optional string policy = 1;
inline bool PolicyAddIntegration_Request::_internal_has_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PolicyAddIntegration_Request::has_policy() const {
  return _internal_has_policy();
}
inline void PolicyAddIntegration_Request::clear_policy() {
  _impl_.policy_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PolicyAddIntegration_Request::policy() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.integration.PolicyAddIntegration_Request.policy)
  return _internal_policy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PolicyAddIntegration_Request::set_policy(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.policy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.integration.PolicyAddIntegration_Request.policy)
}
inline std::string* PolicyAddIntegration_Request::mutable_policy() {
  std::string* _s = _internal_mutable_policy();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.integration.PolicyAddIntegration_Request.policy)
  return _s;
}
inline const std::string& PolicyAddIntegration_Request::_internal_policy() const {
  return _impl_.policy_.Get();
}
inline void PolicyAddIntegration_Request::_internal_set_policy(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.policy_.Set(value, GetArenaForAllocation());
}
inline std::string* PolicyAddIntegration_Request::_internal_mutable_policy() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.policy_.Mutable(GetArenaForAllocation());
}
inline std::string* PolicyAddIntegration_Request::release_policy() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.integration.PolicyAddIntegration_Request.policy)
  if (!_internal_has_policy()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.policy_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.policy_.IsDefault()) {
    _impl_.policy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PolicyAddIntegration_Request::set_allocated_policy(std::string* policy) {
  if (policy != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.policy_.SetAllocated(policy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.policy_.IsDefault()) {
    _impl_.policy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.integration.PolicyAddIntegration_Request.policy)
}

// optional string integration = 2;
inline bool PolicyAddIntegration_Request::_internal_has_integration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PolicyAddIntegration_Request::has_integration() const {
  return _internal_has_integration();
}
inline void PolicyAddIntegration_Request::clear_integration() {
  _impl_.integration_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PolicyAddIntegration_Request::integration() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.integration.PolicyAddIntegration_Request.integration)
  return _internal_integration();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PolicyAddIntegration_Request::set_integration(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.integration_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.integration.PolicyAddIntegration_Request.integration)
}
inline std::string* PolicyAddIntegration_Request::mutable_integration() {
  std::string* _s = _internal_mutable_integration();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.integration.PolicyAddIntegration_Request.integration)
  return _s;
}
inline const std::string& PolicyAddIntegration_Request::_internal_integration() const {
  return _impl_.integration_.Get();
}
inline void PolicyAddIntegration_Request::_internal_set_integration(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.integration_.Set(value, GetArenaForAllocation());
}
inline std::string* PolicyAddIntegration_Request::_internal_mutable_integration() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.integration_.Mutable(GetArenaForAllocation());
}
inline std::string* PolicyAddIntegration_Request::release_integration() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.integration.PolicyAddIntegration_Request.integration)
  if (!_internal_has_integration()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.integration_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.integration_.IsDefault()) {
    _impl_.integration_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PolicyAddIntegration_Request::set_allocated_integration(std::string* integration) {
  if (integration != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.integration_.SetAllocated(integration, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.integration_.IsDefault()) {
    _impl_.integration_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.integration.PolicyAddIntegration_Request.integration)
}

// -------------------------------------------------------------------

// PolicyDelIntegration_Request

// optional string policy = 1;
inline bool PolicyDelIntegration_Request::_internal_has_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PolicyDelIntegration_Request::has_policy() const {
  return _internal_has_policy();
}
inline void PolicyDelIntegration_Request::clear_policy() {
  _impl_.policy_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PolicyDelIntegration_Request::policy() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.integration.PolicyDelIntegration_Request.policy)
  return _internal_policy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PolicyDelIntegration_Request::set_policy(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.policy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.integration.PolicyDelIntegration_Request.policy)
}
inline std::string* PolicyDelIntegration_Request::mutable_policy() {
  std::string* _s = _internal_mutable_policy();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.integration.PolicyDelIntegration_Request.policy)
  return _s;
}
inline const std::string& PolicyDelIntegration_Request::_internal_policy() const {
  return _impl_.policy_.Get();
}
inline void PolicyDelIntegration_Request::_internal_set_policy(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.policy_.Set(value, GetArenaForAllocation());
}
inline std::string* PolicyDelIntegration_Request::_internal_mutable_policy() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.policy_.Mutable(GetArenaForAllocation());
}
inline std::string* PolicyDelIntegration_Request::release_policy() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.integration.PolicyDelIntegration_Request.policy)
  if (!_internal_has_policy()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.policy_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.policy_.IsDefault()) {
    _impl_.policy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PolicyDelIntegration_Request::set_allocated_policy(std::string* policy) {
  if (policy != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.policy_.SetAllocated(policy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.policy_.IsDefault()) {
    _impl_.policy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.integration.PolicyDelIntegration_Request.policy)
}

// optional string integration = 2;
inline bool PolicyDelIntegration_Request::_internal_has_integration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PolicyDelIntegration_Request::has_integration() const {
  return _internal_has_integration();
}
inline void PolicyDelIntegration_Request::clear_integration() {
  _impl_.integration_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PolicyDelIntegration_Request::integration() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.integration.PolicyDelIntegration_Request.integration)
  return _internal_integration();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PolicyDelIntegration_Request::set_integration(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.integration_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.integration.PolicyDelIntegration_Request.integration)
}
inline std::string* PolicyDelIntegration_Request::mutable_integration() {
  std::string* _s = _internal_mutable_integration();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.integration.PolicyDelIntegration_Request.integration)
  return _s;
}
inline const std::string& PolicyDelIntegration_Request::_internal_integration() const {
  return _impl_.integration_.Get();
}
inline void PolicyDelIntegration_Request::_internal_set_integration(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.integration_.Set(value, GetArenaForAllocation());
}
inline std::string* PolicyDelIntegration_Request::_internal_mutable_integration() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.integration_.Mutable(GetArenaForAllocation());
}
inline std::string* PolicyDelIntegration_Request::release_integration() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.integration.PolicyDelIntegration_Request.integration)
  if (!_internal_has_integration()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.integration_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.integration_.IsDefault()) {
    _impl_.integration_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PolicyDelIntegration_Request::set_allocated_integration(std::string* integration) {
  if (integration != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.integration_.SetAllocated(integration, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.integration_.IsDefault()) {
    _impl_.integration_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.integration.PolicyDelIntegration_Request.integration)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace integration
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_integration_2eproto
